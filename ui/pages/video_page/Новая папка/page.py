# -*- coding: utf-8 -*-
from __future__ import annotations
"""
VideoPage ‚Äî –ø–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è.
–ö–ª—é—á–æ–≤–µ:
  ‚Ä¢ ¬´–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏¬ª –æ–Ω–æ–≤–ª—é—î –ø—Ä–µ–≤ º—é —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î JSON, –∞–ª–µ ¬´–°—Ç–∞—Ä—Ç¬ª –∑–∞–≤–∂–¥–∏ –±–µ—Ä–µ –ü–ê–ö–ï–¢ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –Ω–∞–ø—Ä—è–º—É –∑ UI.
  ‚Ä¢ –£ –ª–æ–≥ –¥–æ–¥–∞—î—Ç—å—Å—è –ø—ñ–¥–ø–∏—Å EQ/FX (MD5) ‚Äî –ª–µ–≥–∫–æ –∑–≤—ñ—Ä–∏—Ç–∏, —â–æ –ø—ñ—à–ª–æ –≤ –±–µ–∫–µ–Ω–¥ —Ç–µ —Å–∞–º–µ, —â–æ —Ç–∏ –±–∞—á–∏—à —É –ø—Ä–µ–≤ º—é.
  ‚Ä¢ –ê–ª—å–±–æ–º-—Ä–µ–∂–∏–º (—á–µ–∫–±–æ–∫—Å) -> —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞; —ñ–Ω–∞–∫—à–µ ¬´–ö-—Ç—å –ø—ñ—Å–µ–Ω—å¬ª.
  ‚Ä¢ ¬´–ü–æ–∫–∏ —î –º–∞—Ç–µ—Ä—ñ–∞–ª¬ª ‚Äî –ø–æ–≤–∞–∂–∞—î—Ç—å—Å—è (—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –¥–∞–ª—ñ –ª–∏—à–µ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ).
  ‚Ä¢ –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç—É. –°—Ç–æ–ø –≥–ª—É—à–∏—Ç—å —É—Å—ñ –¥–∂–æ–±–∏.
  ‚Ä¢ –ü—Ä–µ–≤ º—é ‚Äî —Å—ñ—Ä–µ —Ç–ª–æ, –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è, —Ñ–æ—Ä–º–∞—Ç–∏ Shorts/FHD/4K.

–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –±–µ–∫–µ–Ω–¥—É:
  start_video_jobs(cfg, status_q, cancel_event)
  stop_all_jobs()
  effects_render.make_eq_overlay / make_*_overlay / draw_motion_indicator
"""

import os
import json
import time
import queue
import shutil
import hashlib
import threading
from typing import Dict, Tuple, Optional, List

from PySide6.QtCore import Qt, QTimer, QSize, Signal, Slot
from PySide6.QtGui import QPixmap, QColor, QIcon, QPainter
from PySide6.QtWidgets import (
    QWidget, QLabel, QPushButton, QLineEdit, QFileDialog, QComboBox,
    QCheckBox, QSpinBox, QDoubleSpinBox, QSlider,
    QHBoxLayout, QVBoxLayout, QGridLayout, QGroupBox, QFormLayout,
    QTextEdit, QProgressBar, QMessageBox
)

# ==== –±–µ–∫–µ–Ω–¥ —Ç–∞ —Ä–µ–Ω–¥–µ—Ä ====
try:
    from video_backend import start_video_jobs, stop_all_jobs
    from effects_render import (
        make_eq_overlay, make_stars_overlay, make_rain_overlay, make_smoke_overlay,
        draw_motion_indicator,
    )
except Exception:
    from logic.video_backend import start_video_jobs, stop_all_jobs
    from logic.effects_render import (
        make_eq_overlay, make_stars_overlay, make_rain_overlay, make_smoke_overlay,
        draw_motion_indicator,
    )

CONFIG_FILE = "video_qt_config.json"
USER_PRESETS_FILE = "video_user_presets.json"
CACHE_DIR   = os.path.join("_cache", "video_ui")
STAGE_DIR   = os.path.join(CACHE_DIR, "playlist_stage")
os.makedirs(CACHE_DIR, exist_ok=True)

# ------------------------ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ –≤—ñ–¥–∂–µ—Ç–∏ ------------------------

class ColorButton(QPushButton):
    changed = Signal(QColor)
    def __init__(self, hex_color: str = "#FFFFFF", parent=None):
        super().__init__(parent)
        self._c = QColor(hex_color)
        self.setFixedWidth(60)
        self._apply_style()
        self.clicked.connect(self._pick)

    def _apply_style(self):
        self.setText(self._c.name().upper())
        self.setStyleSheet(f"background:{self._c.name()}; color:#000; border:1px solid #444;")

    def _pick(self):
        from PySide6.QtWidgets import QColorDialog
        c = QColorDialog.getColor(self._c, self, "–ö–æ–ª—ñ—Ä")
        if c.isValid():
            self._c = c
            self._apply_style()
            self.changed.emit(self._c)

    def color(self) -> QColor:
        return self._c

    def setColor(self, c: QColor):
        if c and c.isValid():
            self._c = c
            self._apply_style()
            self.changed.emit(self._c)


class PathPicker(QWidget):
    changed = Signal(str)
    def __init__(self, placeholder: str = "", default: str = "", is_dir=True, parent=None):
        super().__init__(parent)
        self.is_dir = is_dir
        self.ed = QLineEdit(default); self.ed.setPlaceholderText(placeholder)
        self.btn = QPushButton("‚Ä¶"); self.btn.setFixedWidth(28)
        lay = QHBoxLayout(self); lay.setContentsMargins(0,0,0,0)
        lay.addWidget(self.ed); lay.addWidget(self.btn)
        self.btn.clicked.connect(self._pick)
        self.ed.textChanged.connect(lambda _: self.changed.emit(self.text()))

    def _pick(self):
        if self.is_dir:
            d = QFileDialog.getExistingDirectory(self, "–û–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É", self.text() or "D:/")
        else:
            d, _ = QFileDialog.getOpenFileName(self, "–û–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª", self.text() or "D:/")
        if d:
            self.ed.setText(d)
            self.changed.emit(self.text())

    def text(self) -> str:
        return self.ed.text().strip()

    def setText(self, s: str):
        self.ed.setText(s or "")

# ------------------------ HELPERS ------------------------

def _ensure_dir(path: str) -> str:
    return path if path and os.path.isdir(path) else ""

def _pct(slider: QSlider) -> int:
    return max(0, min(100, int(slider.value())))

def _hex(qc: QColor) -> str:
    return qc.name().upper()

def _mk_slider(a: int, b: int, v: int) -> QSlider:
    s = QSlider(Qt.Horizontal)
    s.setMinimum(a); s.setMaximum(b); s.setValue(v)
    s.setTickInterval(max(1, (b - a) // 10))
    s.setSingleStep(max(1, (b - a) // 50))
    return s

def _mmss_to_seconds(text: str) -> int:
    try:
        t = text.strip()
        parts = [int(x) for x in t.split(":")]
        if len(parts) == 3:  # hh:mm:ss
            return parts[0]*3600 + parts[1]*60 + parts[2]
        if len(parts) == 2:  # mm:ss
            return parts[0]*60 + parts[1]
        return int(t)
    except Exception:
        return 180

def _seconds_to_mmss(sec: int) -> str:
    sec = max(0, int(sec))
    return f"{sec//60:02d}:{sec%60:02d}"

def _md5sig(d: dict) -> str:
    try:
        return hashlib.md5(json.dumps(d, sort_keys=True).encode("utf-8")).hexdigest()[:8]
    except Exception:
        return "????????"

# =================================================================
#                           VIDEO PAGE
# =================================================================

class VideoPage(QWidget):
    sig_biglog = Signal(str)  # —É –≥–æ–ª–æ–≤–Ω–∏–π –ø—Ä–∞–≤–∏–π –ª–æ–≥

    def __init__(self, parent=None):
        super().__init__(parent)

        self._running = False
        self.status_q: "queue.Queue[dict]" = queue.Queue()
        self.cancel_event = threading.Event()
        self.poll_timer = QTimer(self); self.poll_timer.setInterval(60); self.poll_timer.timeout.connect(self._poll)

        outer = QHBoxLayout(self); outer.setContentsMargins(6,6,6,6); outer.setSpacing(10)

        # -------- LEFT: EQ + FX + MOTION + PRESETS --------
        left = QVBoxLayout(); left.setSpacing(10); outer.addLayout(left, 2)

        # === –ï–ö–í–ê–õ–ê–ô–ó–ï–† ===
        self.eq_enabled = QCheckBox("–£–≤—ñ–º–∫.")
        self.eq_engine  = QComboBox(); self.eq_engine.addItems(["waves", "freqs"])  # –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥–æ–º
        self.eq_mode    = QComboBox(); self.eq_mode.addItems(["bar", "line", "dot"])
        self.eq_bars    = QSpinBox();  self.eq_bars.setRange(8, 256); self.eq_bars.setValue(96)
        self.eq_thick   = QSpinBox();  self.eq_thick.setRange(1, 12); self.eq_thick.setValue(3)
        self.eq_height  = QSpinBox();  self.eq_height.setRange(40, 1000); self.eq_height.setValue(360)
        self.eq_fullscr = QCheckBox("–ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π")
        self.eq_yoffset = QSpinBox();  self.eq_yoffset.setRange(-100, 100); self.eq_yoffset.setValue(0)
        self.eq_mirror  = QCheckBox("–î–∑–µ—Ä–∫–∞–ª–æ"); self.eq_mirror.setChecked(True)
        self.eq_baseline= QCheckBox("–ë–∞–∑–æ–≤–∞ –ª—ñ–Ω—ñ—è")
        self.eq_color   = ColorButton("#FFFFFF"); self.eq_opacity = _mk_slider(0,100,90)

        g_eq = QGroupBox("–ï–∫–≤–∞–ª–∞–π–∑–µ—Ä"); gl = QGridLayout(g_eq); r=0
        gl.addWidget(self.eq_enabled, r,0); gl.addWidget(QLabel("–î–≤–∏–≥—É–Ω:"), r,1); gl.addWidget(self.eq_engine, r,2)
        gl.addWidget(QLabel("–†–µ–∂–∏–º:"), r,3); gl.addWidget(self.eq_mode, r,4); gl.addWidget(QLabel("–°–º—É–≥:"), r,5); gl.addWidget(self.eq_bars, r,6); r+=1
        gl.addWidget(QLabel("–¢–æ–≤—â–∏–Ω–∞:"), r,1); gl.addWidget(self.eq_thick, r,2); gl.addWidget(QLabel("–í–∏—Å–æ—Ç–∞:"), r,3); gl.addWidget(self.eq_height, r,4)
        gl.addWidget(self.eq_fullscr, r,5); gl.addWidget(QLabel("Y (%):"), r,6); gl.addWidget(self.eq_yoffset, r,7); r+=1
        gl.addWidget(self.eq_mirror, r,1); gl.addWidget(self.eq_baseline, r,2); gl.addWidget(QLabel("–ö–æ–ª—ñ—Ä:"), r,3); gl.addWidget(self.eq_color, r,4)
        gl.addWidget(QLabel("–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å:"), r,5); gl.addWidget(self.eq_opacity, r,6)
        left.addWidget(g_eq)

        # === –ï–§–ï–ö–¢–ò ===
        # –ó—ñ—Ä–∫–∏
        self.st_enabled = QCheckBox("‚≠ê –ó—ñ—Ä–∫–∏")
        self.st_count   = QSpinBox(); self.st_count.setRange(0, 5000); self.st_count.setValue(900)
        self.st_int     = _mk_slider(0,100,80)
        self.st_size    = QSpinBox(); self.st_size.setRange(1, 20); self.st_size.setValue(2)
        self.st_pulse   = QSpinBox(); self.st_pulse.setRange(0,100); self.st_pulse.setValue(40)
        self.st_color   = ColorButton("#FFFFFF")
        self.st_opacity = _mk_slider(0,100,85)

        # –î–æ—â
        self.rn_enabled = QCheckBox("üåß –î–æ—â")
        self.rn_count   = QSpinBox(); self.rn_count.setRange(0, 5000); self.rn_count.setValue(1200)
        self.rn_length  = QSpinBox(); self.rn_length.setRange(5,200); self.rn_length.setValue(40)
        self.rn_thick   = QSpinBox(); self.rn_thick.setRange(1,20); self.rn_thick.setValue(2)
        self.rn_angle   = QDoubleSpinBox(); self.rn_angle.setRange(-80, 80); self.rn_angle.setValue(15.0)
        self.rn_speed   = QDoubleSpinBox(); self.rn_speed.setRange(10.0, 800.0); self.rn_speed.setValue(160.0)
        self.rn_color   = ColorButton("#9BE2FF")
        self.rn_opacity = _mk_slider(0,100,55)

        # –î–∏–º
        self.sm_enabled = QCheckBox("üå´ –î–∏–º")
        self.sm_density = QSpinBox(); self.sm_density.setRange(0,400); self.sm_density.setValue(60)
        self.sm_color   = ColorButton("#A0A0A0")
        self.sm_opacity = _mk_slider(0,100,35)
        self.sm_speed   = QDoubleSpinBox(); self.sm_speed.setRange(-80.0, 80.0); self.sm_speed.setValue(12.0)

        g_fx = QGroupBox("–ï—Ñ–µ–∫—Ç–∏"); gf = QGridLayout(g_fx); r=0
        # –∑—ñ—Ä–∫–∏
        gf.addWidget(self.st_enabled, r,0); gf.addWidget(QLabel("–ö-—Ç—å:"), r,1); gf.addWidget(self.st_count, r,2)
        gf.addWidget(QLabel("–Ü–Ω—Ç–µ–Ω—Å (%):"), r,3); gf.addWidget(self.st_int, r,4)
        gf.addWidget(QLabel("–†–æ–∑–º—ñ—Ä:"), r,5); gf.addWidget(self.st_size, r,6)
        gf.addWidget(QLabel("–ü—É–ª—å—Å:"), r,7); gf.addWidget(self.st_pulse, r,8); r+=1
        gf.addWidget(QLabel("–ö–æ–ª—ñ—Ä:"), r,1); gf.addWidget(self.st_color, r,2)
        gf.addWidget(QLabel("–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å:"), r,3); gf.addWidget(self.st_opacity, r,4); r+=1
        # –¥–æ—â
        gf.addWidget(self.rn_enabled, r,0); gf.addWidget(QLabel("–ö-—Ç—å:"), r,1); gf.addWidget(self.rn_count, r,2)
        gf.addWidget(QLabel("–î–æ–≤–∂–∏–Ω–∞:"), r,3); gf.addWidget(self.rn_length, r,4)
        gf.addWidget(QLabel("–¢–æ–≤—â–∏–Ω–∞:"), r,5); gf.addWidget(self.rn_thick, r,6)
        gf.addWidget(QLabel("–ö—É—Ç:"), r,7); gf.addWidget(self.rn_angle, r,8); r+=1
        gf.addWidget(QLabel("–®–≤–∏–¥–∫. (px/s):"), r,1); gf.addWidget(self.rn_speed, r,2)
        gf.addWidget(QLabel("–ö–æ–ª—ñ—Ä:"), r,3); gf.addWidget(self.rn_color, r,4)
        gf.addWidget(QLabel("–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å:"), r,5); gf.addWidget(self.rn_opacity, r,6); r+=1
        # –¥–∏–º
        gf.addWidget(self.sm_enabled, r,0); gf.addWidget(QLabel("–ì—É—Å—Ç–∏–Ω–∞:"), r,1); gf.addWidget(self.sm_density, r,2)
        gf.addWidget(QLabel("–ö–æ–ª—ñ—Ä:"), r,3); gf.addWidget(self.sm_color, r,4)
        gf.addWidget(QLabel("–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å:"), r,5); gf.addWidget(self.sm_opacity, r,6)
        gf.addWidget(QLabel("–î—Ä–µ–π—Ñ (px/s):"), r,7); gf.addWidget(self.sm_speed, r,8)
        left.addWidget(g_fx)

        # === –†–£–• –ö–ê–î–†–ê / –ö–ê–ú–ï–†–ê (—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —É –ø—Ä–µ–≤ º—é) ===
        self.mv_enabled = QCheckBox("–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä—É—Ö –∫–∞–¥—Ä–∞")
        self.mv_dir     = QComboBox(); self.mv_dir.addItems(["lr","rl","up","down","zin","zout","rotate","shake"])
        self.mv_speed   = QDoubleSpinBox(); self.mv_speed.setRange(0.0, 400.0); self.mv_speed.setValue(40.0)
        self.mv_amount  = QDoubleSpinBox(); self.mv_amount.setRange(0.0, 100.0); self.mv_amount.setValue(20.0)
        self.mv_osc     = QCheckBox("Oscillate"); self.mv_osc.setChecked(True)
        self.mv_rotdeg  = QDoubleSpinBox(); self.mv_rotdeg.setRange(0.0, 45.0); self.mv_rotdeg.setValue(8.0)
        self.mv_rothz   = QDoubleSpinBox(); self.mv_rothz.setRange(0.01, 2.5); self.mv_rothz.setSingleStep(0.01); self.mv_rothz.setValue(0.10)
        self.mv_shpx    = QDoubleSpinBox(); self.mv_shpx.setRange(0.0, 50.0); self.mv_shpx.setValue(6.0)
        self.mv_shz     = QDoubleSpinBox(); self.mv_shz.setRange(0.05, 8.0); self.mv_shz.setValue(1.2)

        g_mv = QGroupBox("–†—É—Ö –∫–∞–¥—Ä–∞ / –ö–∞–º–µ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —É –ø—Ä–µ–≤ º—é)"); gm = QGridLayout(g_mv); r=0
        gm.addWidget(self.mv_enabled, r,0); gm.addWidget(QLabel("–ù–∞–ø—Ä—è–º:"), r,1); gm.addWidget(self.mv_dir, r,2)
        gm.addWidget(QLabel("–®–≤–∏–¥–∫—ñ—Å—Ç—å:"), r,3); gm.addWidget(self.mv_speed, r,4)
        gm.addWidget(QLabel("–ú—ñ—Ä–∞ (%):"), r,5); gm.addWidget(self.mv_amount, r,6); r+=1
        gm.addWidget(self.mv_osc, r,0)
        gm.addWidget(QLabel("Rotate ¬∞:"), r,3); gm.addWidget(self.mv_rotdeg, r,4)
        gm.addWidget(QLabel("Rotate –ì—Ü:"), r,5); gm.addWidget(self.mv_rothz, r,6); r+=1
        gm.addWidget(QLabel("Shake px:"), r,3); gm.addWidget(self.mv_shpx, r,4)
        gm.addWidget(QLabel("Shake –ì—Ü:"), r,5); gm.addWidget(self.mv_shz, r,6)
        left.addWidget(g_mv)

        # -------- RIGHT: PATHS + FORMAT + RENDER + PLAYLIST + PREVIEW + PROGRESS --------
        right = QVBoxLayout(); right.setSpacing(10); outer.addLayout(right, 1)

        # –ü–∞–ø–∫–∏
        self.p_music = PathPicker("–ú—É–∑–∏–∫–∞:", "D:/music", True)
        self.p_media = PathPicker("–§–æ—Ç–æ/–í—ñ–¥–µ–æ:", "D:/media", True)
        self.p_out   = PathPicker("–í–∏—Ö—ñ–¥:", "D:/", True)
        g_paths = QGroupBox("–ü–∞–ø–∫–∏"); ff = QFormLayout(g_paths)
        ff.addRow("üéµ –ú—É–∑–∏–∫–∞:", self.p_music)
        ff.addRow("üñº –§–æ—Ç–æ/–í—ñ–¥–µ–æ:", self.p_media)
        ff.addRow("üì§ –í–∏—Ö—ñ–¥:", self.p_out)
        right.addWidget(g_paths)

        # –§–æ—Ä–º–∞—Ç
        self.cmb_format = QComboBox(); self.cmb_format.addItems(["FHD", "Shorts", "4K"])
        self.cmb_res    = QComboBox(); self.cmb_res.addItems([
            "YouTube FHD 1920x1080 30fps",
            "YouTube Shorts 1080x1920 30fps",
            "4K 3840x2160 30fps",
        ])
        g_fmt = QGroupBox("–§–æ—Ä–º–∞—Ç"); lf = QGridLayout(g_fmt)
        lf.addWidget(QLabel("–¢–∏–ø:"), 0,0); lf.addWidget(self.cmb_format, 0,1)
        lf.addWidget(QLabel("–†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å:"), 0,2); lf.addWidget(self.cmb_res, 0,3)
        right.addWidget(g_fmt)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–µ–Ω–¥–µ—Ä—É
        self.cmb_gpu    = QComboBox(); self.cmb_gpu.addItems(["auto","nvidia","intel","amd","cpu"])
        self.cmb_preset = QComboBox(); self.cmb_preset.addItems(["auto/balanced","p1","p2","p3","p4","p5","p6","p7(quality)"])
        self.sp_threads = QSpinBox(); self.sp_threads.setRange(0,64); self.sp_threads.setValue(16)
        self.sp_jobs    = QSpinBox(); self.sp_jobs.setRange(1,10); self.sp_jobs.setValue(1)
        self.sp_songs   = QSpinBox(); self.sp_songs.setRange(1,10); self.sp_songs.setValue(1)
        self.sld_gpu    = _mk_slider(10,100,100)
        self.chk_2s     = QCheckBox("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—ñ–¥–µ–æ ‚â• 2—Å"); self.chk_2s.setChecked(True)
        self.chk_until  = QCheckBox("–ü–æ–∫–∏ —î –º–∞—Ç–µ—Ä—ñ–∞–ª"); self.chk_until.setChecked(False)
        self.chk_album  = QCheckBox("–ê–ª—å–±–æ–º-—Ä–µ–∂–∏–º")
        self.ed_album   = QLineEdit("00:30:00"); self.ed_album.setToolTip("hh:mm:ss (—á–∞—Å –∞–ª—å–±–æ–º—É)")
        self.ed_album.setEnabled(False)
        self.chk_album.toggled.connect(self.ed_album.setEnabled)
        self.btn_clear_cache = QPushButton("–û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à")
        self.btn_reset_session = QPushButton("Reset —Å–µ—Å—ñ—ó")

        g_r = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–µ–Ω–¥–µ—Ä—É"); gr = QGridLayout(g_r); r=0
        gr.addWidget(QLabel("GPU:"), r,0); gr.addWidget(self.cmb_gpu, r,1)
        gr.addWidget(QLabel("GPU Preset:"), r,2); gr.addWidget(self.cmb_preset, r,3); r+=1
        gr.addWidget(QLabel("Threads:"), r,0); gr.addWidget(self.sp_threads, r,1)
        gr.addWidget(QLabel("–ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ (jobs):"), r,2); gr.addWidget(self.sp_jobs, r,3); r+=1
        gr.addWidget(QLabel("–ö-—Ç—å –ø—ñ—Å–µ–Ω—å:"), r,0); gr.addWidget(self.sp_songs, r,1)
        gr.addWidget(QLabel("Max GPU load (%):"), r,2); gr.addWidget(self.sld_gpu, r,3); r+=1
        gr.addWidget(self.chk_2s, r,0); gr.addWidget(self.chk_until, r,1)
        gr.addWidget(self.chk_album, r,2); gr.addWidget(self.ed_album, r,3); r+=1
        gr.addWidget(self.btn_clear_cache, r,0,1,2); gr.addWidget(self.btn_reset_session, r,2,1,2)
        right.addWidget(g_r)

        # –ü–ª–µ–π–ª—ñ—Å—Ç (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä)
        self.chk_shuffle_after = QCheckBox("–ü—ñ—Å–ª—è 1 –∫–æ–ª–∞ ‚Äî –ø–µ—Ä–µ–º—ñ—à—É–≤–∞—Ç–∏"); self.chk_shuffle_after.setChecked(False)
        g_pl = QGroupBox("–ü–ª–µ–π–ª—ñ—Å—Ç (–¥–æ 10 –ø—ñ—Å–µ–Ω—å)"); pl = QVBoxLayout(g_pl)
        pl.addWidget(QLabel("–ù–µ –≤–∏–±—Ä–∞–Ω–æ"))
        pl.addWidget(self.chk_shuffle_after)
        right.addWidget(g_pl)

        # –ü—Ä–µ–≤ º—é
        g_pv = QGroupBox("–ü—Ä–µ–≤ º—é (–æ–Ω–ª–∞–π–Ω)"); pv = QVBoxLayout(g_pv)
        self.preview = QLabel(" "); self.preview.setFixedHeight(270)
        # —Å—ñ—Ä–µ —Ç–ª–æ
        self.preview.setStyleSheet("background:#1E1E1E;border:1px solid #333")
        self.preview.setAlignment(Qt.AlignCenter)
        self.btn_apply = QPushButton("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏"); self.btn_start = QPushButton("–°—Ç–∞—Ä—Ç"); self.btn_stop = QPushButton("–°—Ç–æ–ø")
        hb = QHBoxLayout(); hb.addStretch(1); hb.addWidget(self.btn_apply); hb.addWidget(self.btn_start); hb.addWidget(self.btn_stop)
        pv.addWidget(self.preview); pv.addLayout(hb)
        right.addWidget(g_pv)

        # –ü—Ä–æ–≥—Ä–µ—Å + –º–∞–ª–∏–π –ª–æ–≥
        g_prog = QGroupBox("–ü—Ä–æ–≥—Ä–µ—Å"); pr = QVBoxLayout(g_prog)
        self.progress = QProgressBar(); self.progress.setValue(0)
        self.small_log = QTextEdit(); self.small_log.setObjectName("smallLog")
        self.small_log.setReadOnly(True); self.small_log.setFixedHeight(150)
        pr.addWidget(self.progress); pr.addWidget(self.small_log)
        right.addWidget(g_prog)

        # ----- –∫–Ω–æ–ø–∫–∏ -----
        self.btn_apply.clicked.connect(self._on_apply)
        self.btn_start.clicked.connect(self._start)
        self.btn_stop.clicked.connect(self._stop)
        self.btn_clear_cache.clicked.connect(self._clear_cache)
        self.btn_reset_session.clicked.connect(self._reset_session)
        self.cmb_format.currentIndexChanged.connect(self._sync_format_res)

        # ----- live-preview debounce -----
        self._live_timer = QTimer(self); self._live_timer.setInterval(140); self._live_timer.setSingleShot(True)
        def _arm():
            if not self._live_timer.isActive(): self._live_timer.start()
        self._live_timer.timeout.connect(lambda: self._update_preview(initial=False))

        # –ø—ñ–¥–ø–∏—Å–∏ –Ω–∞ –∑–º—ñ–Ω–∏ (—â–æ–± –ø—Ä–µ–≤ º—é —Ä–µ–∞–≥—É–≤–∞–ª–æ)
        for w in [self.eq_enabled, self.eq_engine, self.eq_mode, self.eq_bars, self.eq_thick,
                  self.eq_height, self.eq_fullscr, self.eq_yoffset, self.eq_mirror, self.eq_baseline,
                  self.eq_opacity,
                  self.st_enabled, self.st_count, self.st_int, self.st_size, self.st_pulse, self.st_opacity,
                  self.rn_enabled, self.rn_count, self.rn_length, self.rn_thick, self.rn_angle, self.rn_speed, self.rn_opacity,
                  self.sm_enabled, self.sm_density, self.sm_opacity, self.sm_speed,
                  self.mv_enabled, self.mv_dir, self.mv_speed, self.mv_amount, self.mv_osc, self.mv_rotdeg, self.mv_rothz, self.mv_shpx, self.mv_shz,
                  self.cmb_res, self.cmb_format]:
            if hasattr(w, "toggled"): w.toggled.connect(_arm)
            if hasattr(w, "valueChanged"): w.valueChanged.connect(_arm)
            if hasattr(w, "currentIndexChanged"): w.currentIndexChanged.connect(_arm)
        self.eq_color.changed.connect(_arm)
        self.st_color.changed.connect(_arm)
        self.rn_color.changed.connect(_arm)
        self.sm_color.changed.connect(_arm)

        # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        self._load_config()
        self._sync_format_res()
        self._update_preview(initial=True)

    # -------------------- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ --------------------

    def _status(self, msg: str):
        self.small_log.append(msg)
        if any(k in msg for k in ("FFmpeg", "‚ñ∂", "‚úÖ", "‚ùå", "–ì–æ—Ç–æ–≤–æ", "–ü–æ–º–∏–ª–∫–∞", "Start:", "Apply:", "BEcfg")):
            self.sig_biglog.emit(msg)

    def _get_WH_fps(self) -> Tuple[int,int,int]:
        txt = self.cmb_res.currentText()
        try:
            wh = [p for p in txt.split() if "x" in p][0]
            w, h = map(int, wh.split("x"))
            fps = int([p for p in txt.split() if "fps" in p][0].replace("fps",""))
            return w, h, fps
        except Exception:
            return 1920, 1080, 30

    def _sync_format_res(self):
        m = self.cmb_format.currentText()
        mapping = {
            "Shorts": "YouTube Shorts 1080x1920 30fps",
            "FHD":    "YouTube FHD 1920x1080 30fps",
            "4K":     "4K 3840x2160 30fps",
        }
        self.cmb_res.setCurrentText(mapping.get(m, "YouTube FHD 1920x1080 30fps"))
        self._update_preview(initial=False)

    # --- —Å–∫–ª–∞–¥–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ UI ---
    def _build_eq_dict(self) -> Dict:
        return {
            "enabled": self.eq_enabled.isChecked(),
            "engine": self.eq_engine.currentText(),
            "mode": self.eq_mode.currentText(),
            "bars": self.eq_bars.value(),
            "thickness": self.eq_thick.value(),
            "height": self.eq_height.value(),
            "fullscreen": self.eq_fullscr.isChecked(),
            "y_offset": self.eq_yoffset.value(),
            "mirror": self.eq_mirror.isChecked(),
            "baseline": self.eq_baseline.isChecked(),
            "color": _hex(self.eq_color.color()),
            "opacity": _pct(self.eq_opacity),
        }

    def _build_stars_dict(self) -> Dict:
        return {
            "enabled": self.st_enabled.isChecked(),
            "count": self.st_count.value(),
            "intensity": _pct(self.st_int),
            "size": self.st_size.value(),
            "pulse": int(self.st_pulse.value()),
            "color": _hex(self.st_color.color()),
            "opacity": _pct(self.st_opacity),
        }

    def _build_rain_dict(self) -> Dict:
        return {
            "enabled": self.rn_enabled.isChecked(),
            "count": self.rn_count.value(),
            "length": self.rn_length.value(),
            "thickness": self.rn_thick.value(),
            "angle_deg": float(self.rn_angle.value()),
            "speed": float(self.rn_speed.value()),
            "color": _hex(self.rn_color.color()),
            "opacity": _pct(self.rn_opacity),
        }

    def _build_smoke_dict(self) -> Dict:
        return {
            "enabled": self.sm_enabled.isChecked(),
            "density": self.sm_density.value(),
            "color": _hex(self.sm_color.color()),
            "opacity": _pct(self.sm_opacity),
            "speed": float(self.sm_speed.value()),
        }

    def _build_motion_dict(self) -> Dict:
        return {
            "enabled": self.mv_enabled.isChecked(),
            "direction": self.mv_dir.currentText(),
            "speed": float(self.mv_speed.value()),
            "amount": float(self.mv_amount.value()),
            "oscillate": self.mv_osc.isChecked(),
            "rot_deg": float(self.mv_rotdeg.value()),
            "rot_hz": float(self.mv_rothz.value()),
            "shake_px": float(self.mv_shpx.value()),
            "shake_hz": float(self.mv_shz.value()),
        }

    # --- –ø—Ä–µ–≤ º—é ---
    def _base_pm(self, W:int, H:int) -> QPixmap:
        pm = QPixmap(W,H); pm.fill(QColor("#000")); return pm

    def _update_preview(self, initial: bool=False):
        W,H,_ = self._get_WH_fps()
        pm = QPixmap(self._base_pm(W,H))
        p = QPainter(pm)
        p.setRenderHint(QPainter.RenderHint.Antialiasing, True)
        p.setRenderHint(QPainter.RenderHint.SmoothPixmapTransform, True)

        # EQ
        eq = self._build_eq_dict()
        if eq["enabled"]:
            ov = make_eq_overlay(eq, W, H)
            p.drawPixmap(0,0,ov)

        # Stars
        st = self._build_stars_dict()
        if st["enabled"]:
            ov = make_stars_overlay(st, W, H)
            p.drawPixmap(0,0,ov)

        # Rain
        rn = self._build_rain_dict()
        if rn["enabled"]:
            ov = make_rain_overlay(rn, W, H)
            p.drawPixmap(0,0,ov)

        # Smoke
        sm = self._build_smoke_dict()
        if sm["enabled"]:
            ov = make_smoke_overlay(sm, W, H)
            p.drawPixmap(0,0,ov)

        # Motion indicator
        mv = self._build_motion_dict()
        if mv["enabled"]:
            draw_motion_indicator(p, pm.rect(), mv)
        p.end()

        self.preview.setPixmap(
            pm.scaled(self.preview.width(), self.preview.height(),
                      Qt.KeepAspectRatio, Qt.SmoothTransformation)
        )
        if not initial:
            self._status("[UI] –ü—Ä–µ–≤ º—é –æ–Ω–æ–≤–ª–µ–Ω–æ")

    # --- –∫–æ–Ω—Ñ—ñ–≥ ---
    def _build_cfg(self) -> Dict:
        W,H,fps = self._get_WH_fps()
        cfg = {
            "music_dir": _ensure_dir(self.p_music.text()),
            "media_dir": _ensure_dir(self.p_media.text()),
            "out_dir":   _ensure_dir(self.p_out.text()),
            "resolution": f"{W}x{H} {fps}fps",
            "gpu": self.cmb_gpu.currentText(),
            "gpu_preset": self.cmb_preset.currentText(),
            "threads": int(self.sp_threads.value()),
            "jobs": int(self.sp_jobs.value()),
            "songs": int(self.sp_songs.value()),
            "gpu_load": _pct(self.sld_gpu),
            "use_video_ge2s": bool(self.chk_2s.isChecked()),
            "until_material": bool(self.chk_until.isChecked()),
            "shuffle_after_loop": bool(self.chk_shuffle_after.isChecked()),
            # –∞–ª—å–±–æ–º
            "album_enabled": bool(self.chk_album.isChecked()),
            "album_sec": _mmss_to_seconds(self.ed_album.text()) if self.chk_album.isChecked() else 0,
            # –µ—Ñ–µ–∫—Ç–∏
            "eq_ui": self._build_eq_dict(),
            "stars_ui": self._build_stars_dict(),
            "rain_ui": self._build_rain_dict(),
            "smoke_ui": self._build_smoke_dict(),
            "motion_ui": self._build_motion_dict(),
        }
        return cfg

    def _save_config(self):
        try:
            with open(CONFIG_FILE, "w", encoding="utf-8") as f:
                json.dump(self._build_cfg(), f, ensure_ascii=False, indent=2)
        except Exception as e:
            self._status(f"[UI] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É: {e}")

    def _load_config(self):
        try:
            if os.path.isfile(CONFIG_FILE):
                cfg = json.load(open(CONFIG_FILE, "r", encoding="utf-8"))
                self.p_music.setText(cfg.get("music_dir",""))
                self.p_media.setText(cfg.get("media_dir",""))
                self.p_out.setText(cfg.get("out_dir",""))
                self.cmb_res.setCurrentText(cfg.get("resolution","YouTube FHD 1920x1080 30fps"))
                self.cmb_gpu.setCurrentText(cfg.get("gpu","auto"))
                self.cmb_preset.setCurrentText(cfg.get("gpu_preset","auto/balanced"))
                self.sp_threads.setValue(int(cfg.get("threads",16)))
                self.sp_jobs.setValue(int(cfg.get("jobs",1)))
                self.sp_songs.setValue(int(cfg.get("songs",1)))
                self.sld_gpu.setValue(int(cfg.get("gpu_load",100)))
                self.chk_2s.setChecked(bool(cfg.get("use_video_ge2s", True)))
                self.chk_until.setChecked(bool(cfg.get("until_material", False)))
                self.chk_shuffle_after.setChecked(bool(cfg.get("shuffle_after_loop", False)))
                # –∞–ª—å–±–æ–º
                self.chk_album.setChecked(bool(cfg.get("album_enabled", False)))
                if cfg.get("album_enabled", False):
                    self.ed_album.setText(_seconds_to_mmss(int(cfg.get("album_sec", 0))))
                    self.ed_album.setEnabled(True)
        except Exception as e:
            self._status(f"[UI] –ö–æ–Ω—Ñ—ñ–≥ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {e}")

    # --- –∫–µ—à / —Å–µ—Å—ñ—è ---
    def _clear_cache(self):
        try:
            if os.path.isdir(CACHE_DIR):
                shutil.rmtree(CACHE_DIR, ignore_errors=True)
            os.makedirs(CACHE_DIR, exist_ok=True)
            self._status("[UI] –ö–µ—à –æ—á–∏—â–µ–Ω–æ.")
        except Exception as e:
            self._status(f"[UI] –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {e}")

    def _reset_session_state(self):
        try:
            while True:
                self.status_q.get_nowait()
        except queue.Empty:
            pass
        self.progress.setValue(0)
        self.small_log.clear()
        try:
            if os.path.isdir(STAGE_DIR):
                shutil.rmtree(STAGE_DIR, ignore_errors=True)
        except Exception:
            pass

    def _reset_session(self):
        self._stop()
        self._reset_session_state()
        self._status("[UI] –°–µ—Å—ñ—é —Å–∫–∏–Ω—É—Ç–æ. –ì–æ—Ç–æ–≤–æ –¥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É.")

    # -------------------- –°–¢–ê–†–¢/–°–¢–û–ü/–ü–û–õ–Ü–ù–ì --------------------
    def _on_apply(self):
        cfg = self._build_cfg()
        self._update_preview()
        self._save_config()
        self._status(f"[UI] Apply: EQsig={_md5sig(cfg['eq_ui'])} mode={cfg['eq_ui']['mode']} "
                     f"bars={cfg['eq_ui']['bars']} color={cfg['eq_ui']['color']} "
                     f"h={cfg['eq_ui'].get('height')} yoff={cfg['eq_ui'].get('y_offset')} "
                     f"mirror={cfg['eq_ui'].get('mirror')} full={cfg['eq_ui'].get('fullscreen')}")

    def _start(self):
        if self._running:
            self._status("[UI] –£–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∏–π —Å—Ç–∞—Ä—Ç —ñ–≥–Ω–æ—Ä.")
            return
        self.progress.setValue(0); self.small_log.clear()
        cfg = self._build_cfg()
        self._status(f"[UI] Start: EQsig={_md5sig(cfg['eq_ui'])}")
        if not cfg["music_dir"] or not cfg["out_dir"]:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–∞–ø–∫–∏ –ú—É–∑–∏–∫–∞ —Ç–∞ –í–∏—Ö—ñ–¥.")
            return
        # –∑–∞–ø–∞—Å–Ω–∏–π –¥–∞–º–ø –¥–ª—è –¥–µ–±–∞–≥—É
        try:
            with open(os.path.join(CACHE_DIR, "cfg_dump.json"), "w", encoding="utf-8") as f:
                json.dump(cfg, f, ensure_ascii=False, indent=2)
        except Exception:
            pass

        self._save_config()
        try:
            self._running = True
            self.btn_start.setEnabled(False)
            start_video_jobs(cfg, self.status_q, self.cancel_event)
            self._status("[–í—ñ–¥–µ–æ] ‚ñ∂ —Å—Ç–∞—Ä—Ç")
            self.poll_timer.start()
        except Exception as e:
            self._running = False
            self.btn_start.setEnabled(True)
            self._status(f"[–í—ñ–¥–µ–æ] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏: {e}")

    def _stop(self):
        try:
            self.cancel_event.set()
            stop_all_jobs()
            self.cancel_event.clear()
            self._status("[–í—ñ–¥–µ–æ] –°—Ç–æ–ø/—Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        except Exception as e:
            self._status(f"[–í—ñ–¥–µ–æ] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–æ–ø—É: {e}")
        finally:
            self._running = False
            self.btn_start.setEnabled(True)

    @Slot()
    def _poll(self):
        changed = False
        while True:
            try:
                msg = self.status_q.get_nowait()
            except queue.Empty:
                break

            t = msg.get("type")
            if t == "start":
                self._status(f"[–í—ñ–¥–µ–æ] FFmpeg: {msg.get('cmd','.')}")
            elif t == "log":
                self.small_log.append(msg.get("msg",""))
                changed = True
            elif t == "progress":
                try:
                    self.progress.setValue(int(msg.get("value",0)))
                except Exception:
                    pass
            elif t == "done":
                outp = msg.get("output","")
                self.progress.setValue(100)
                self._status(f"[–í—ñ–¥–µ–æ] ‚úÖ –ì–æ—Ç–æ–≤–æ: {outp}")
                self.poll_timer.stop()
                self._running = False
                self.btn_start.setEnabled(True)
            elif t == "error":
                em = msg.get("msg","")
                self._status(f"[–í—ñ–¥–µ–æ] ‚ùå –ü–æ–º–∏–ª–∫–∞: {em}")
                self.poll_timer.stop()
                self._running = False
                self.btn_start.setEnabled(True)

        if changed:
            try:
                sb = self.small_log.verticalScrollBar()
                sb.setValue(sb.maximum())
            except Exception:
                pass

    # -------------------- —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–¥—ñ—ó --------------------
    def closeEvent(self, e):
        # —è–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å, –≥–ª—É—à–∏–º–æ —Ä–µ–Ω–¥–µ—Ä–∏
        try:
            self._stop()
        except Exception:
            pass
        super().closeEvent(e)
